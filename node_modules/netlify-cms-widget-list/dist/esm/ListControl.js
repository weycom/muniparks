"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _immutable = require("immutable");

var _reactSortableHoc = require("react-sortable-hoc");

var _netlifyCmsWidgetObject = _interopRequireDefault(require("netlify-cms-widget-object"));

var _typedListHelpers = require("./typedListHelpers");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function valueToString(value) {
  return value ? value.join(',').replace(/,([^\s]|$)/g, ', $1') : '';
}

const ObjectControl = _netlifyCmsWidgetObject.default.controlComponent;
const ListItem = (0, _styledBase.default)("div", {
  target: "e14bfka80",
  label: "ListItem"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const SortableListItem = (0, _reactSortableHoc.SortableElement)(ListItem);
const StyledListItemTopBar = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.ListItemTopBar, {
  target: "e14bfka81",
  label: "StyledListItemTopBar"
})("background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NestedObjectLabel = (0, _styledBase.default)("div", {
  target: "e14bfka82",
  label: "NestedObjectLabel"
})("display:", props => props.collapsed ? 'block' : 'none', ";border-top:0;color:", props => props.error ? _netlifyCmsUiDefault.colors.errorText : 'inherit', ";background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";padding:13px;border-radius:0 0 ", _netlifyCmsUiDefault.lengths.borderRadius, " ", _netlifyCmsUiDefault.lengths.borderRadius, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const styleStrings = {
  collapsedObjectControl: `
    display: none;
  `,
  objectWidgetTopBarContainer: `
    padding: ${_netlifyCmsUiDefault.lengths.objectWidgetTopBarContainerPadding};
  `
};
const styles = {
  listControlItem: process.env.NODE_ENV === "production" ? {
    name: "zbp1o3-listControlItem",
    styles: "margin-top:18px;&:first-of-type{margin-top:26px;}label:listControlItem;"
  } : {
    name: "zbp1o3-listControlItem",
    styles: "margin-top:18px;&:first-of-type{margin-top:26px;}label:listControlItem;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  listControlItemCollapsed: process.env.NODE_ENV === "production" ? {
    name: "1gjco9g-listControlItemCollapsed",
    styles: "padding-bottom:0;label:listControlItemCollapsed;"
  } : {
    name: "1gjco9g-listControlItemCollapsed",
    styles: "padding-bottom:0;label:listControlItemCollapsed;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  }
};
const SortableList = (0, _reactSortableHoc.SortableContainer)((_ref) => {
  let items = _ref.items,
      renderItem = _ref.renderItem;
  return (0, _core.jsx)("div", null, items.map(renderItem));
});
const valueTypes = {
  SINGLE: 'SINGLE',
  MULTIPLE: 'MULTIPLE',
  MIXED: 'MIXED'
};

class ListControl extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "validations", []);

    _defineProperty(this, "getValueType", () => {
      const field = this.props.field;

      if (field.get('fields')) {
        return valueTypes.MULTIPLE;
      } else if (field.get('field')) {
        return valueTypes.SINGLE;
      } else if (field.get(_typedListHelpers.TYPES_KEY)) {
        return valueTypes.MIXED;
      } else {
        return null;
      }
    });

    _defineProperty(this, "handleChange", e => {
      const onChange = this.props.onChange;
      const oldValue = this.state.value;
      const newValue = e.target.value;
      const listValue = e.target.value.split(',');

      if (newValue.match(/,$/) && oldValue.match(/, $/)) {
        listValue.pop();
      }

      const parsedValue = valueToString(listValue);
      this.setState({
        value: parsedValue
      });
      onChange(listValue.map(val => val.trim()));
    });

    _defineProperty(this, "handleFocus", () => {
      this.props.setActiveStyle();
    });

    _defineProperty(this, "handleBlur", e => {
      const listValue = e.target.value.split(',').map(el => el.trim()).filter(el => el);
      this.setState({
        value: valueToString(listValue)
      });
      this.props.setInactiveStyle();
    });

    _defineProperty(this, "handleAdd", e => {
      e.preventDefault();
      const _this$props = this.props,
            value = _this$props.value,
            onChange = _this$props.onChange;
      const parsedValue = this.getValueType() === valueTypes.SINGLE ? null : (0, _immutable.Map)();
      this.setState({
        itemsCollapsed: this.state.itemsCollapsed.push(false)
      });
      onChange((value || (0, _immutable.List)()).push(parsedValue));
    });

    _defineProperty(this, "handleAddType", (type, typeKey) => {
      const _this$props2 = this.props,
            value = _this$props2.value,
            onChange = _this$props2.onChange;
      let parsedValue = (0, _immutable.Map)().set(typeKey, type);
      this.setState({
        itemsCollapsed: this.state.itemsCollapsed.push(false)
      });
      onChange((value || (0, _immutable.List)()).push(parsedValue));
    });

    _defineProperty(this, "processControlRef", ref => {
      if (!ref) return;
      this.validations.push(ref.validate);
    });

    _defineProperty(this, "validate", () => {
      this.validations.forEach(validateListItem => {
        validateListItem();
      });
    });

    _defineProperty(this, "getObjectValue", idx => this.props.value.get(idx) || (0, _immutable.Map)());

    _defineProperty(this, "handleRemove", (index, event) => {
      event.preventDefault();
      const itemsCollapsed = this.state.itemsCollapsed;
      const _this$props3 = this.props,
            value = _this$props3.value,
            metadata = _this$props3.metadata,
            onChange = _this$props3.onChange,
            field = _this$props3.field,
            clearFieldErrors = _this$props3.clearFieldErrors;
      const collectionName = field.get('name');
      const isSingleField = this.getValueType() === valueTypes.SINGLE;
      const metadataRemovePath = isSingleField ? value.get(index) : value.get(index).valueSeq();
      const parsedMetadata = metadata && {
        [collectionName]: metadata.removeIn(metadataRemovePath)
      }; // Removed item object index is the last item in the list

      const removedItemIndex = value.count() - 1;
      this.setState({
        itemsCollapsed: itemsCollapsed.delete(index)
      });
      onChange(value.remove(index), parsedMetadata);
      clearFieldErrors(); // Remove deleted item object validation

      if (this.validations) {
        this.validations.splice(removedItemIndex, 1);
      }
    });

    _defineProperty(this, "handleItemCollapseToggle", (index, event) => {
      event.preventDefault();
      const itemsCollapsed = this.state.itemsCollapsed;
      const collapsed = itemsCollapsed.get(index);
      this.setState({
        itemsCollapsed: itemsCollapsed.set(index, !collapsed)
      });
    });

    _defineProperty(this, "handleCollapseAllToggle", e => {
      e.preventDefault();
      const value = this.props.value;
      const itemsCollapsed = this.state.itemsCollapsed;
      const allItemsCollapsed = itemsCollapsed.every(val => val === true);
      this.setState({
        itemsCollapsed: (0, _immutable.List)(Array(value.size).fill(!allItemsCollapsed))
      });
    });

    _defineProperty(this, "onSortEnd", (_ref2) => {
      let oldIndex = _ref2.oldIndex,
          newIndex = _ref2.newIndex;
      const value = this.props.value;
      const itemsCollapsed = this.state.itemsCollapsed; // Update value

      const item = value.get(oldIndex);
      const newValue = value.delete(oldIndex).insert(newIndex, item);
      this.props.onChange(newValue); // Update collapsing

      const collapsed = itemsCollapsed.get(oldIndex);
      const updatedItemsCollapsed = itemsCollapsed.delete(oldIndex).insert(newIndex, collapsed);
      this.setState({
        itemsCollapsed: updatedItemsCollapsed
      });
    });

    _defineProperty(this, "renderItem", (item, index) => {
      const _this$props4 = this.props,
            classNameWrapper = _this$props4.classNameWrapper,
            editorControl = _this$props4.editorControl,
            onValidateObject = _this$props4.onValidateObject,
            metadata = _this$props4.metadata,
            clearFieldErrors = _this$props4.clearFieldErrors,
            fieldsErrors = _this$props4.fieldsErrors,
            controlRef = _this$props4.controlRef,
            resolveWidget = _this$props4.resolveWidget;
      const itemsCollapsed = this.state.itemsCollapsed;
      const collapsed = itemsCollapsed.get(index);
      let field = this.props.field;

      if (this.getValueType() === valueTypes.MIXED) {
        field = (0, _typedListHelpers.getTypedFieldForValue)(field, item);

        if (!field) {
          return this.renderErroneousTypedItem(index, item);
        }
      }

      return (0, _core.jsx)(SortableListItem, {
        css:
        /*#__PURE__*/
        (0, _css2.default)([styles.listControlItem, collapsed && styles.listControlItemCollapsed], "label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
        index: index,
        key: `item-${index}`
      }, (0, _core.jsx)(StyledListItemTopBar, {
        collapsed: collapsed,
        onCollapseToggle: (0, _partial2.default)(this.handleItemCollapseToggle, index),
        onRemove: (0, _partial2.default)(this.handleRemove, index),
        dragHandleHOC: _reactSortableHoc.SortableHandle
      }), (0, _core.jsx)(NestedObjectLabel, {
        collapsed: collapsed
      }, this.objectLabel(item)), (0, _core.jsx)(_core.ClassNames, null, (_ref3) => {
        let css = _ref3.css,
            cx = _ref3.cx;
        return (0, _core.jsx)(ObjectControl, {
          classNameWrapper: cx(classNameWrapper, {
            [css`
                  ${styleStrings.collapsedObjectControl};
                `]: collapsed
          }),
          value: item,
          field: field,
          onChangeObject: this.handleChangeFor(index),
          editorControl: editorControl,
          resolveWidget: resolveWidget,
          metadata: metadata,
          forList: true,
          onValidateObject: onValidateObject,
          clearFieldErrors: clearFieldErrors,
          fieldsErrors: fieldsErrors,
          ref: this.processControlRef,
          controlRef: controlRef
        });
      }));
    });

    const _field = props.field,
          _value = props.value;

    const _allItemsCollapsed = _field.get('collapsed', true);

    const _itemsCollapsed = _value && Array(_value.size).fill(_allItemsCollapsed);

    this.state = {
      itemsCollapsed: (0, _immutable.List)(_itemsCollapsed),
      value: valueToString(_value)
    };
  }

  /**
   * Always update so that each nested widget has the option to update. This is
   * required because ControlHOC provides a default `shouldComponentUpdate`
   * which only updates if the value changes, but every widget must be allowed
   * to override this.
   */
  shouldComponentUpdate() {
    return true;
  }

  handleChangeFor(index) {
    return (fieldName, newValue, newMetadata) => {
      const _this$props5 = this.props,
            value = _this$props5.value,
            metadata = _this$props5.metadata,
            onChange = _this$props5.onChange,
            field = _this$props5.field;
      const collectionName = field.get('name');
      const newObjectValue = this.getValueType() !== valueTypes.SINGLE ? this.getObjectValue(index).set(fieldName, newValue) : newValue;
      const parsedMetadata = {
        [collectionName]: Object.assign(metadata ? metadata.toJS() : {}, newMetadata || {})
      };
      onChange(value.set(index, newObjectValue), parsedMetadata);
    };
  }

  objectLabel(item) {
    const field = this.props.field;

    if (this.getValueType() === valueTypes.MIXED) {
      return (0, _typedListHelpers.getTypedFieldForValue)(field, item).get('label', field.get('name'));
    }

    const multiFields = field.get('fields');
    const singleField = field.get('field');
    const labelField = multiFields && multiFields.first() || singleField;
    const value = multiFields ? item.get(multiFields.first().get('name')) : singleField.get('label');
    return (value || `No ${labelField.get('name')}`).toString();
  }

  renderErroneousTypedItem(index, item) {
    const field = this.props.field;
    const errorMessage = (0, _typedListHelpers.getErrorMessageForTypedFieldAndValue)(field, item);
    return (0, _core.jsx)(SortableListItem, {
      css:
      /*#__PURE__*/
      (0, _css2.default)([styles.listControlItem, styles.listControlItemCollapsed], "label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
      index: index,
      key: `item-${index}`
    }, (0, _core.jsx)(StyledListItemTopBar, {
      onCollapseToggle: null,
      onRemove: (0, _partial2.default)(this.handleRemove, index),
      dragHandleHOC: _reactSortableHoc.SortableHandle
    }), (0, _core.jsx)(NestedObjectLabel, {
      collapsed: true,
      error: true
    }, errorMessage));
  }

  renderListControl() {
    const _this$props6 = this.props,
          value = _this$props6.value,
          forID = _this$props6.forID,
          field = _this$props6.field,
          classNameWrapper = _this$props6.classNameWrapper;
    const itemsCollapsed = this.state.itemsCollapsed;
    const items = value || (0, _immutable.List)();
    const label = field.get('label', field.get('name'));
    const labelSingular = field.get('label_singular') || field.get('label', field.get('name'));
    const listLabel = items.size === 1 ? labelSingular.toLowerCase() : label.toLowerCase();
    return (0, _core.jsx)(_core.ClassNames, null, (_ref4) => {
      let cx = _ref4.cx,
          css = _ref4.css;
      return (0, _core.jsx)("div", {
        id: forID,
        className: cx(classNameWrapper, css`
                ${styleStrings.objectWidgetTopBarContainer}
              `)
      }, (0, _core.jsx)(_netlifyCmsUiDefault.ObjectWidgetTopBar, {
        allowAdd: field.get('allow_add', true),
        onAdd: this.handleAdd,
        types: field.get(_typedListHelpers.TYPES_KEY, null),
        onAddType: type => this.handleAddType(type, (0, _typedListHelpers.resolveFieldKeyType)(field)),
        heading: `${items.size} ${listLabel}`,
        label: labelSingular.toLowerCase(),
        onCollapseToggle: this.handleCollapseAllToggle,
        collapsed: itemsCollapsed.every(val => val === true)
      }), (0, _core.jsx)(SortableList, {
        items: items,
        renderItem: this.renderItem,
        onSortEnd: this.onSortEnd,
        useDragHandle: true,
        lockAxis: "y"
      }));
    });
  }

  renderInput() {
    const _this$props7 = this.props,
          forID = _this$props7.forID,
          classNameWrapper = _this$props7.classNameWrapper;
    const value = this.state.value;
    return (0, _core.jsx)("input", {
      type: "text",
      id: forID,
      value: value,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: classNameWrapper
    });
  }

  render() {
    if (this.getValueType() !== null) {
      return this.renderListControl();
    } else {
      return this.renderInput();
    }
  }

}

exports.default = ListControl;

_defineProperty(ListControl, "propTypes", {
  metadata: _reactImmutableProptypes.default.map,
  onChange: _propTypes.default.func.isRequired,
  onChangeObject: _propTypes.default.func.isRequired,
  onValidateObject: _propTypes.default.func.isRequired,
  value: _reactImmutableProptypes.default.list,
  field: _propTypes.default.object,
  forID: _propTypes.default.string,
  controlRef: _propTypes.default.func,
  mediaPaths: _reactImmutableProptypes.default.map.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onOpenMediaLibrary: _propTypes.default.func.isRequired,
  onAddAsset: _propTypes.default.func.isRequired,
  onRemoveInsertedMedia: _propTypes.default.func.isRequired,
  classNameWrapper: _propTypes.default.string.isRequired,
  setActiveStyle: _propTypes.default.func.isRequired,
  setInactiveStyle: _propTypes.default.func.isRequired,
  editorControl: _propTypes.default.func.isRequired,
  resolveWidget: _propTypes.default.func.isRequired,
  clearFieldErrors: _propTypes.default.func.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired
});

_defineProperty(ListControl, "defaultProps", {
  value: (0, _immutable.List)()
});